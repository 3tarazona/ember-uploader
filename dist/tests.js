eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - .\');\ntest(\'ember-uploader.js should pass jshint\', function() { \n  ok(true, \'ember-uploader.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=ember-uploader.jshint.js");

eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - ember-uploader\');\ntest(\'ember-uploader/file-field.js should pass jshint\', function() { \n  ok(true, \'ember-uploader/file-field.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=ember-uploader/file-field.jshint.js");

eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - ember-uploader\');\ntest(\'ember-uploader/s3.js should pass jshint\', function() { \n  ok(true, \'ember-uploader/s3.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=ember-uploader/s3.jshint.js");

eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - ember-uploader\');\ntest(\'ember-uploader/uploader.js should pass jshint\', function() { \n  ok(true, \'ember-uploader/uploader.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=ember-uploader/uploader.jshint.js");

eval("(function() {var Uploader, file;\n\nmodule(\"EmberUploader.S3Uploader\", {\n  setup: function() {\n    if (typeof WebKitBlobBuilder === \"undefined\") {\n      file = new Blob([\'test\'], { type: \'text/plain\' });\n    } else {\n      var builder;\n      builder = new WebKitBlobBuilder();\n      builder.append(\'test\');\n      file = builder.getBlob();\n    }\n\n    file.mime = \'text/plain\';\n    file.name = \'test.txt\';\n\n    Uploader = EmberUploader.S3Uploader.extend({\n      url: \'/api/signed-url\'\n    });\n  }\n});\n\ntest(\"it has a sign url of \'/api/signed-url\'\", function() {\n  expect(1);\n\n  var uploader = Uploader.create();\n  equal(uploader.url, \'/api/signed-url\');\n});\n\ntest(\"uploads to s3\", function() {\n  expect(1);\n\n  var uploader = Uploader.create({\n    file: file\n  });\n\n  uploader.on(\'didUpload\', function(data) {\n    start();\n    equal(data, \'\');\n  });\n\n  uploader.upload(file);\n\n  stop();\n});\n})();//@ sourceURL=unit/s3_test.js");

eval("(function() {var Uploader, file;\n\nmodule(\"EmberUploader.Uploader\", {\n  setup: function() {\n    if (typeof WebKitBlobBuilder === \"undefined\") {\n      file = new Blob([\'test\'], { type: \'text/plain\' });\n    } else {\n      var builder;\n      builder = new WebKitBlobBuilder();\n      builder.append(\'test\');\n      file = builder.getBlob();\n    }\n\n    Uploader = EmberUploader.Uploader.extend({\n      url: \'/test\'\n    });\n  }\n});\n\ntest(\"has a url of \'/test\'\", function() {\n  var uploader = Uploader.create();\n  equal(uploader.url, \'/test\');\n});\n\ntest(\"has a paramName of \'upload\'\", function() {\n  var uploader = Uploader.create({ paramName: \'upload\' });\n  equal(uploader.paramName, \'upload\');\n});\n\ntest(\"has a paramNamespace of \'post\'\", function() {\n  var uploader = Uploader.create({ paramNamespace: \'post\' });\n  equal(uploader.paramNamespace, \'post\');\n});\n\ntest(\"creates a param namespace\", function() {\n  var uploader = Uploader.create({ paramNamespace: \'post\' });\n  equal(uploader.toNamespacedParam(\'upload\'), \'post[upload]\');\n});\n\ntest(\"has an ajax request of type \'PUT\'\", function() {\n  var uploader = Uploader.create({type: \'PUT\'});\n  equal(uploader.type, \'PUT\');\n});\n\ntest(\"uploads to the given url\", function() {\n  expect(1);\n\n  var uploader = Uploader.create({\n    url: \'/api/upload\',\n    file: file\n  });\n\n  uploader.on(\'didUpload\', function(data) {\n    start();\n    equal(data, \'OK\');\n  });\n\n  uploader.upload(file);\n\n  stop();\n});\n\ntest(\"emits progress event\", function() {\n  expect(1);\n\n  var uploader = Uploader.create({\n    url: \'/upload\',\n    file: file\n  });\n\n  uploader.on(\'progress\', function(e) {\n    start();\n    equal(e.percent, 100);\n  });\n\n  uploader.upload(file);\n\n  stop();\n});\n\ntest(\"it can receive extra data\", function() {\n  expect(1);\n\n  var data = { test: \'valid\' };\n\n  var TestUploader = Uploader.extend({\n    url: \'/upload\',\n    setupFormData: function(file, extra) {\n      equal(extra, data);\n      return this._super(file, extra);\n    }\n  });\n\n  var uploader = TestUploader.create();\n  uploader.upload(file, data);\n});\n})();//@ sourceURL=unit/uploader_test.js");
